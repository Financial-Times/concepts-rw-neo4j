
		MATCH (canonical:Thing {prefUUID:{uuid}})<-[:EQUIVALENT_TO]-(source:Thing)
		OPTIONAL MATCH (source)-[:ISSUED_BY]->(issuer:Thing)
		OPTIONAL MATCH (source)-[:COUNTRY_OF_INCORPORATION]->(countryOfIncorporationNode:Thing)
OPTIONAL MATCH (source)-[:COUNTRY_OF_OPERATIONS]->(countryOfOperationsNode:Thing)
OPTIONAL MATCH (source)-[:COUNTRY_OF_RISK]->(countryOfRiskNode:Thing)
OPTIONAL MATCH (source)-[:HAS_BROADER]->(hasBroaderNode:Thing)
OPTIONAL MATCH (source)-[:HAS_FOCUS]->(hasFocusNode:Thing)
OPTIONAL MATCH (source)-[:HAS_MEMBER]->(hasMemberNode:Thing)
OPTIONAL MATCH (source)-[:HAS_ORGANISATION]->(hasOrganisationNode:Thing)
OPTIONAL MATCH (source)-[:HAS_PARENT]->(hasParentNode:Thing)
OPTIONAL MATCH (source)-[:IMPLIED_BY]->(impliedByNode:Thing)
OPTIONAL MATCH (source)-[:IS_RELATED_TO]->(isRelatedToNode:Thing)
OPTIONAL MATCH (source)-[:SUB_ORGANISATION_OF]->(subOrganisationOfNode:Thing)
OPTIONAL MATCH (source)-[:SUPERSEDED_BY]->(supersededByNode:Thing)
OPTIONAL MATCH (source)-[hasIndustryClassificationRel:HAS_INDUSTRY_CLASSIFICATION]->(hasIndustryClassificationNode:NAICSIndustryClassification)
OPTIONAL MATCH (source)-[hasRoleRel:HAS_ROLE]->(hasRoleNode:Thing)
		WITH
			canonical,
			issuer,
			source,
			countryOfIncorporationNode,
countryOfOperationsNode,
countryOfRiskNode,
hasBroaderNode,
hasFocusNode,
hasIndustryClassificationNode,
hasIndustryClassificationRel,
hasMemberNode,
hasOrganisationNode,
hasParentNode,
hasRoleNode,
hasRoleRel,
impliedByNode,
isRelatedToNode,
subOrganisationOfNode,
supersededByNode
			ORDER BY
				source.uuid,
				hasRoleNode.uuid
		WITH
			canonical,
			issuer,
			hasMemberNode,
			hasOrganisationNode,
			{
				uuid: source.uuid,
				prefLabel: source.prefLabel,
				types: labels(source),
				authority: source.authority,
				authorityValue: source.authorityValue,
				figiCode: source.figiCode,
				lastModifiedEpoch: source.lastModifiedEpoch,
				isDeprecated: source.isDeprecated,
				industryIdentifier: source.industryIdentifier,
				issuedBy: issuer.uuid,
				broaderUUIDs: collect(DISTINCT hasBroaderNode.uuid),
countryOfIncorporationUUID: countryOfIncorporationNode.uuid,
countryOfOperationsUUID: countryOfOperationsNode.uuid,
countryOfRiskUUID: countryOfRiskNode.uuid,
hasFocusUUIDs: collect(DISTINCT hasFocusNode.uuid),
impliedByUUIDs: collect(DISTINCT impliedByNode.uuid),
membershipRoles: collect(DISTINCT {membershipRoleUUID: hasRoleNode.uuid, inceptionDate: hasRoleRel.inceptionDate, terminationDate: hasRoleRel.terminationDate, inceptionDateEpoch: hasRoleRel.inceptionDateEpoch, terminationDateEpoch: hasRoleRel.terminationDateEpoch}),
naicsIndustryClassifications: collect(DISTINCT {UUID: hasIndustryClassificationNode.uuid, rank: hasIndustryClassificationRel.rank}),
organisationUUID: hasOrganisationNode.uuid,
parentOrganisation: subOrganisationOfNode.uuid,
parentUUIDs: collect(DISTINCT hasParentNode.uuid),
personUUID: hasMemberNode.uuid,
relatedUUIDs: collect(DISTINCT isRelatedToNode.uuid),
supersededByUUIDs: collect(DISTINCT supersededByNode.uuid)
			} as sources,
			collect({
				inceptionDate: hasRoleRel.inceptionDate,
				inceptionDateEpoch: hasRoleRel.inceptionDateEpoch,
				membershipRoleUUID: hasRoleNode.uuid,
				terminationDate: hasRoleRel.terminationDate,
				terminationDateEpoch: hasRoleRel.terminationDateEpoch
			}) as membershipRoles
		RETURN
			canonical.prefUUID as prefUUID,
			canonical.prefLabel as prefLabel,
			labels(canonical) as types,
			canonical.aggregateHash as aggregateHash,
			canonical.inceptionDate as inceptionDate,
			canonical.inceptionDateEpoch as inceptionDateEpoch,
			canonical.terminationDate as terminationDate,
			canonical.terminationDateEpoch as terminationDateEpoch,
			canonical.figiCode as figiCode,
			issuer.uuid as issuedBy,
			hasOrganisationNode.uuid as organisationUUID,
			hasMemberNode.uuid as personUUID,
			membershipRoles,
			collect(sources) as sourceRepresentations,
			canonical.aliases as aliases,
canonical.birthYear as birthYear,
canonical.countryCode as countryCode,
canonical.countryOfIncorporation as countryOfIncorporation,
canonical.countryOfOperations as countryOfOperations,
canonical.countryOfRisk as countryOfRisk,
canonical.descriptionXML as descriptionXML,
canonical.emailAddress as emailAddress,
canonical.facebookPage as facebookPage,
canonical.formerNames as formerNames,
canonical.imageUrl as imageUrl,
canonical.industryIdentifier as industryIdentifier,
canonical.iso31661 as iso31661,
canonical.leiCode as leiCode,
canonical.postalCode as postalCode,
canonical.properName as properName,
canonical.salutation as salutation,
canonical.scopeNote as scopeNote,
canonical.shortLabel as shortLabel,
canonical.shortName as shortName,
canonical.strapline as strapline,
canonical.tradeNames as tradeNames,
canonical.twitterHandle as twitterHandle,
canonical.yearFounded as yearFounded